[PLATFORMS]
ALL


[COMPUTESHADER]

#include <Shaders/Common/Utils.h>

#include "SharpeningConstants.h"

Texture2D InputTexture;
RWTexture2D<float4> Output;

#define A_GPU
#define A_HLSL

#include <Shaders/ThirdParty/FFX/ffx_a.h>

// ffx_cas.h wants defined
float3 CasLoad(float2 pos)
{
  return InputTexture[pos].rgb;
}

// Lets you transform input from the load into a linear color space between 0 and 1.
void CasInput(inout float r, inout float g, inout float b)
{
  // noop
}

#include <Shaders/ThirdParty/FFX/ffx_cas.h>

[numthreads(POSTPROCESS_BLOCKSIZE , POSTPROCESS_BLOCKSIZE , 1)]
void main(uint3 threadId : SV_DispatchThreadID)
{
  // Out of bounds check
  if (any(int2(threadId.xy) >= TargetViewportSize.xy))
    return;

  float4 const0;
  float4 const1;
  CasSetup(const0, const1, Strength, TargetViewportSize.x, TargetViewportSize.y, TargetViewportSize.x, TargetViewportSize.y);

  float3 color = 0.0f;
  CasFilter(color.r, color.g, color.b, threadId.xy, const0, const1, true);

  const float a = InputTexture[threadId.xy].a;
  Output[threadId.xy] = float4(color, a);
}
