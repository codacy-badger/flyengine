[PLATFORMS]
ALL


[COMPUTESHADER]

#include <Shaders/Common/Utils.h>

#include "FilmGrainConstants.h"

Texture2D InputTexture;
RWTexture2D<float4> Output;

float gaussian(float z, float u, float o)
{
  return (1.0 / (o * sqrt(2.0 * 3.1415))) * exp(-(((z - u) * (z - u)) / (2.0 * (o * o))));
}

[numthreads(POSTPROCESS_BLOCKSIZE , POSTPROCESS_BLOCKSIZE , 1)]
void main(uint3 threadId : SV_DispatchThreadID)
{
  // Out of bounds check
  if (any(int2(threadId.xy) >= TargetViewportSize.xy))
    return;

  const float2 uv = (threadId.xy + 0.5f) * TargetTexelSize;
  float4 color    = InputTexture[threadId.xy];

  // Film grain
  float t          = WorldTime * float(Speed);
  float seed       = dot(uv, float2(12.9898, 78.233));
  float noise      = frac(sin(seed) * 43758.5453 + t);
  noise            = gaussian(noise, float(Mean), float(Variance) * float(Variance));
  float film_grain =  noise * Intensity;

  // Iso noise
  float iso_noise = GetRandom(frac(uv.x * uv.y * WorldTime)) * ISO * 0.00002f;

  // Additive blending
  color.rgb += (film_grain + iso_noise) * 0.5f;

  Output[threadId.xy] = float4(saturate(color.rgb), 1.0f);
}
