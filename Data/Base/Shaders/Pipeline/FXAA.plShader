[PLATFORMS]
ALL


[COMPUTESHADER]

#include <Shaders/Common/Utils.h>

#include "FXAAConstants.h"

Texture2D InputTexture;
RWTexture2D<float4> Output;

#define FXAA_PC 1
#define FXAA_HLSL_5 1
#define FXAA_QUALITY__PRESET 39
#define FXAA_GREEN_AS_LUMA 1

#include <Shaders/ThirdParty/Nvidia/FXAA3_11.h>
//=============================

[numthreads(POSTPROCESS_BLOCKSIZE , POSTPROCESS_BLOCKSIZE , 1)]
void main(uint3 threadId : SV_DispatchThreadID)
{
  // Out of bounds check
  if (any(int2(threadId.xy) >= TargetViewportSize.xy))
    return;

  const float2 uv = (threadId.xy + 0.5f) * TargetTexelSize;

  FxaaTex fxaa_tex = { LinearClampSampler, InputTexture };
  float2 fxaaQualityRcpFrame = TargetTexelSize;

  float3 color = FxaaPixelShader
  (
    uv, 0, fxaa_tex, fxaa_tex, fxaa_tex,
    fxaaQualityRcpFrame, 0, 0, 0,
    SubPixelAliasingRemovalAmount,
    EdgeThreshold,
    EdgeThresholdMin,
    0, 0, 0, 0
  ).rgb;

  Output[threadId.xy] = float4(color, InputTexture[threadId.xy].a);
}
