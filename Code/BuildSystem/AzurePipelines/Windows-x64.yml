# Variable 'task.MSBuild.status' was defined in the Variables tab
trigger:
  branches:
    include:
    - dev
resources:
  repositories:
  - repository: self
    type: git
    ref: dev
jobs:
- job: Job_3
  displayName: StartVM
  pool:
    vmImage: 'windows-2022'
  steps:
  - checkout: none
- job: Job_1
  displayName: Windows-x64
  timeoutInMinutes: 180
  pool:
    name: Default
    demands:
    - Agent.OS -equals Windows_NT
  steps:
  - checkout: self
    submodules: true
    lfs: true
    clean: false
  - task: PowerShell@2
    displayName: Check force clean
    inputs:
      targetType: inline
      script: |
        $pathA = Join-Path $(System.DefaultWorkingDirectory) "gitClean.txt"
        $pathB = Join-Path $(System.DefaultWorkingDirectory) "gitCleanCopy.txt"
        $clean = -not (Test-Path $pathB) -or (compare-object (get-content $pathA) (get-content $pathB))
        if ($clean)
        {
            Write-Host "Cleaning repo!"
            git clean -dfx
            Copy-Item -Path $pathA -Destination $pathB
        }
  - task: PowerShell@2
    displayName: Delete old crash dumps
    inputs:
      targetType: inline
      script: >-
        if ((Test-Path $(System.DefaultWorkingDirectory)\Output\Bin\WinVs2022Dev64))
        {
            Get-ChildItem $(System.DefaultWorkingDirectory)\Output\Bin\WinVs2022Dev64\*.dmp | foreach { Remove-Item -Force -Path $_.FullName }
        }
  - task: PowerShell@2
    displayName: Run CMake
    inputs:
      targetType: filePath
      filePath: "$(System.DefaultWorkingDirectory)/RunCMake.ps1"
      arguments: "-Target Win64vs2022 -NoUnityBuild -NoSubmoduleUpdate -SolutionName solution"
  - task: MSBuild@1
    displayName: Build Solution
    inputs:
      solution: $(System.DefaultWorkingDirectory)\Workspace\vs2022x64\solution.sln
      msbuildArchitecture: x64
      platform: x64
      configuration: Dev
  - task: PowerShell@2
    displayName: PowerShell Script
    inputs:
      targetType: inline
      filePath: Write-Host "##vso[task.setvariable variable=task.MSBuild.status]success"
      script: Write-Host "##vso[task.setvariable variable=task.MSBuild.status]success"
  - task: CmdLine@2
    displayName: HeaderCheck
    condition: succeededOrFailed()
    inputs:
      script: Output\Bin\WinVs2022Dev64\HeaderCheck.exe $(System.DefaultWorkingDirectory)\Code\Engine\Foundation -i $(System.DefaultWorkingDirectory)\Code\Engine -f $(System.DefaultWorkingDirectory)\Code\Engine\Foundation\headerCheckerIgnore.json
  - task: CmdLine@2
    displayName: List files
    condition: always()
    inputs:
      script: dir /s /o $(System.DefaultWorkingDirectory)\Output
  - task: CmdLine@2
    displayName: Copy Bin
    condition: failed()
    inputs:
      script: >-
        REM rmdir /S /Q $(System.DefaultWorkingDirectory)\build

        xcopy Output\Bin\WinVs2022Dev64\*.dll $(Build.ArtifactStagingDirectory)\Bin\WinVs2022Dev64\ /C/D/Y

        xcopy Output\Bin\WinVs2022Dev64\*.pdb $(Build.ArtifactStagingDirectory)\Bin\WinVs2022Dev64\ /C/D/Y

        xcopy Output\Bin\WinVs2022Dev64\*.exe $(Build.ArtifactStagingDirectory)\Bin\WinVs2022Dev64\ /C/D/Y
  - task: PowerShell@2
    displayName: Copy AssetCaches
    condition: eq(variables['task.MSBuild.status'], 'success')
    inputs:
      targetType: inline
      script: >-
        $RootDir = "$(System.DefaultWorkingDirectory)"

        $TargetDir = "$(Build.ArtifactStagingDirectory)\AssetCache"


        Set-Location $RootDir

        $AssetCaches = (Get-ChildItem $RootDir -Directory -include AssetCache -recurse)


        foreach($Dir in $AssetCaches)

        {
            Write-Host "Dir: $Dir"
            $relativePath = Get-Item $Dir | Resolve-Path -Relative
            $targetPath = Join-Path -Path $TargetDir -ChildPath $relativePath
            Write-Host "targetPath: $targetPath"
            New-Item -ItemType Directory -Force -Path $targetPath
            Copy-Item $Dir\* -Filter * -Destination $targetPath -Recurse -Force
        }
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: TestResults'
    condition: eq(variables['task.MSBuild.status'], 'success')
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)\Test
      ArtifactName: TestResults
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Bin'
    condition: failed()
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)\Bin
      ArtifactName: Bin
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: AssetCache'
    condition: eq(variables['task.MSBuild.status'], 'success')
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)\AssetCache
      ArtifactName: AssetCache
...
