<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	<Type Name="vk::Flags&lt;*&gt;">
		<DisplayString>[{($T1)m_mask}]</DisplayString>
	</Type>

	<!-- Strings-->
	<Type Name="plHybridStringBase&lt;*&gt;">
		<AlternativeType Name="plStringBuilder" />
		<DisplayString>{m_Data.m_pElements,s8}</DisplayString>
		<StringView>m_Data.m_pElements,s8</StringView>
		<Expand>
			<Item Name="String">m_Data.m_pElements,s8</Item>
			<Item Name="CharacterCount">m_uiCharacterCount</Item>
			<Item Name="ElementCount">m_Data.m_uiCount</Item>
		</Expand>
	</Type>

	<Type Name="plStringView">
		<DisplayString Condition="m_pStart != 0">{m_pStart,[m_pEnd - m_pStart]s8}</DisplayString>
		<DisplayString Condition="m_pStart == 0">&lt;Invalid String&gt;</DisplayString>
		<StringView>m_pStart,[m_pEnd - m_pStart]s8</StringView>
		<Expand>
			<Item Name="String" Condition="m_pStart != 0">m_pStart,[m_pEnd - m_pStart]s8</Item>
			<Item Name="ElementCount" Condition="m_pStart != 0">m_pEnd - m_pStart</Item>
			<Item Name="Valid">m_pStart != 0</Item>
			<Item Name="ZeroTerminated" Condition="m_pEnd != 0">m_pEnd[0] == 0</Item>
		</Expand>
	</Type>	
	
	<Type Name="plStringIterator">
		<AlternativeType Name="plStringReverseIterator" />
		<DisplayString Condition="m_pElement == 0">&lt;Invalid Iterator&gt;</DisplayString>
		<DisplayString Condition="(m_pElement[1] &amp; 0xC0) != 0x80">{m_pElement,[1]s8}</DisplayString>
		<DisplayString Condition="(m_pElement[1] &amp; 0xC0) == 0x80 &amp;&amp; (m_pElement[2] &amp; 0xC0) != 0x80">{m_pElement,[2]s8}</DisplayString>
		<DisplayString Condition="(m_pElement[1] &amp; 0xC0) == 0x80 &amp;&amp; (m_pElement[2] &amp; 0xC0) == 0x80 &amp;&amp; (m_pElement[3] &amp; 0xC0) != 0x80">{m_pElement,[3]s8}</DisplayString>
		<DisplayString Condition="(m_pElement[1] &amp; 0xC0) == 0x80 &amp;&amp; (m_pElement[2] &amp; 0xC0) == 0x80 &amp;&amp; (m_pElement[3] &amp; 0xC0) == 0x80 &amp;&amp; (m_pElement[4] &amp; 0xC0) != 0x80">{m_pElement,[4]s8}</DisplayString>
	</Type>
	
	<Type Name="plHashedString">
		<DisplayString>{m_Data.m_pElement->m_Value.m_sString}</DisplayString>
		<StringView>m_Data.m_pElement->m_Value.m_sString</StringView>
		<Expand>
			<!--<Item Name="ref">m_Data.m_pElement->m_Value.m_iRefCount</Item>-->
			<Item Name="hash">m_Data.m_pElement->m_Key,x</Item>
		</Expand>
	</Type>
	
	<!-- Container & Arrays-->
	<Type Name="plDynamicArrayBase&lt;*&gt;">
		<DisplayString>{{ count={m_uiCount} }}</DisplayString>
		<Expand>
			<Item Name="count">m_uiCount</Item>
			<Item Name="capacity">m_uiCapacity</Item>
			<ArrayItems>
				<Size>m_uiCount</Size>
				<ValuePointer>m_pElements</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	
	<Type Name="plArrayBase&lt;*&gt;">
		<DisplayString>{{ count={m_uiCount} }}</DisplayString>
		<Expand>
			<Item Name="count">m_uiCount</Item>
			<Item Name="capacity">m_uiCapacity</Item>
			<ArrayItems>
				<Size>m_uiCount</Size>
				<ValuePointer>m_pElements</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	
	<Type Name="plSmallArrayBase&lt;*&gt;">
		<DisplayString>{{ count={m_uiCount} }}</DisplayString>
		<Expand>
			<Item Name="count">m_uiCount</Item>
			<Item Name="capacity">m_uiCapacity</Item>
			<Item Name="userdata">m_uiUserData</Item>
			<ArrayItems>
				<Size>m_uiCount</Size>
				<ValuePointer>(m_uiCapacity &lt;= $T2) ? ($T1*)((intptr_t)(m_StaticData)) : m_pElements</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	
	<Type Name="plStaticArray&lt;*&gt;">
		<DisplayString>{{ count={m_uiCount} }}</DisplayString>
		<Expand>
			<Item Name="count">m_uiCount</Item>
			<Item Name="capacity">m_uiCapacity</Item>
			<ArrayItems>
				<Size>m_uiCount</Size>
				<ValuePointer>($T1*)m_Data</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	
	<Type Name="plHashTableBase&lt;*&gt;">
		<DisplayString>{{ count={m_uiCount} }}</DisplayString>
		<Expand>
			<Item Name="count">m_uiCount</Item>
			<Item Name="capacity">m_uiCapacity</Item>
			<ArrayItems>
				<Size>m_uiCapacity</Size>
				<ValuePointer>m_pEntries</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	
	<Type Name="plHashSetBase&lt;*&gt;">
		<DisplayString>{{ count={m_uiCount} }}</DisplayString>
		<Expand>
			<Item Name="count">m_uiCount</Item>
			<Item Name="capacity">m_uiCapacity</Item>
			<ArrayItems>
				<Size>m_uiCapacity</Size>
				<ValuePointer>m_pEntries</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="plListBase&lt;*&gt;">
		<DisplayString>{{ count={m_uiCount} }}</DisplayString>
		<Expand>
			<Item Name="count">m_uiCount</Item>
			<LinkedListItems>
				<Size>m_uiCount</Size>
				<HeadPointer>m_First.m_pNext</HeadPointer>
				<NextPointer>m_pNext</NextPointer>
				<ValueNode>m_Data</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>

	<Type Name="plDequeBase&lt;*&gt;">
		<DisplayString>{{ count={m_uiCount} }}</DisplayString>
		<Expand>
			<Item Name="count">m_uiCount</Item>
			<IndexListItems>
				<Size>m_uiCount</Size>
				<ValueNode>m_pChunks[(m_uiFirstElement + $i) / m_uiChunkSize][(m_uiFirstElement + $i) % m_uiChunkSize]</ValueNode>
			</IndexListItems>
		</Expand>
	</Type>

	<Type Name="plMapBase&lt;*&gt;">
		<AlternativeType Name="plSetBase&lt;*&gt;" />
		<DisplayString>{{ count={m_uiCount} }}</DisplayString>
		<Expand>
			<Item Name="count">m_uiCount</Item>
			<TreeItems>
				<Size>m_uiCount</Size>
				<HeadPointer>m_pRoot</HeadPointer>
				<LeftPointer>m_pLink[0]</LeftPointer>
				<RightPointer>m_pLink[1]</RightPointer>
				<ValueNode Condition="m_uiLevel != 0">*this</ValueNode>
			</TreeItems>
		</Expand>
	</Type>

	<Type Name="plStaticRingBuffer&lt;*&gt;">
		<DisplayString>{{ count={m_uiCount} }}</DisplayString>
		<Expand>
			<Item Name="count">m_uiCount</Item>
			<Item Name="start index">m_uiFirstElement</Item>
			<ArrayItems>
				<Size>m_uiCount</Size>
				<ValuePointer>m_pElements</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="plArrayPtr&lt;*&gt;">
		<DisplayString>{{ count={m_uiCount} }}</DisplayString>
		<Expand>
			<Item Name="count">m_uiCount</Item>
			<ArrayItems>
				<Size>m_uiCount</Size>
				<ValuePointer>m_pPtr</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<!-- Basic Types -->
	<Type Name="plVariant">
		<DisplayString Condition="m_uiType == Type::TypedObject &amp;&amp; m_bIsShared">({m_Data.shared->m_pType->m_sTypeName,sb}*) {reinterpret_cast&lt;void*&gt;(m_Data.shared->m_Ptr)}</DisplayString>
		<DisplayString Condition="m_uiType == Type::TypedObject &amp;&amp; !m_bIsShared">({m_Data.inlined.m_pType->m_sTypeName,sb}*) {reinterpret_cast&lt;void*&gt;(&amp;m_Data)}</DisplayString>
		<Expand>
			<Item Name="Type">(Type::Enum) m_uiType</Item>
			<Item Name="Value" Condition="m_uiType == Type::Bool">*reinterpret_cast&lt;bool*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Int8">*reinterpret_cast&lt;plInt8*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::UInt8">*reinterpret_cast&lt;plUInt8*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Int16">*reinterpret_cast&lt;plInt16*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::UInt16">*reinterpret_cast&lt;plUInt16*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Int32">*reinterpret_cast&lt;plInt32*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::UInt32">*reinterpret_cast&lt;plUInt32*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Int64">*reinterpret_cast&lt;plInt64*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::UInt64">*reinterpret_cast&lt;plUInt64*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Float">*reinterpret_cast&lt;float*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Double">*reinterpret_cast&lt;double*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Color">*reinterpret_cast&lt;plColor*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Vector2">*reinterpret_cast&lt;plVec2Template&lt;float&gt;*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Vector3">*reinterpret_cast&lt;plVec3Template&lt;float&gt;*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Vector4">*reinterpret_cast&lt;plVec4Template&lt;float&gt;*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Vector2I">*reinterpret_cast&lt;plVec2Template&lt;int&gt;*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Vector3I">*reinterpret_cast&lt;plVec3Template&lt;int&gt;*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Vector4I">*reinterpret_cast&lt;plVec4Template&lt;int&gt;*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Vector2U">*reinterpret_cast&lt;plVec2Template&lt;unsigned int&gt;*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Vector3U">*reinterpret_cast&lt;plVec3Template&lt;unsigned int&gt;*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Vector4U">*reinterpret_cast&lt;plVec4Template&lt;unsigned int&gt;*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Quaternion">*reinterpret_cast&lt;plQuatTemplate&lt;float&gt;*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Matrix3">*reinterpret_cast&lt;plMat3Template&lt;float&gt;*&gt;(m_Data.shared->m_Ptr)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Matrix4">*reinterpret_cast&lt;plMat4Template&lt;float&gt;*&gt;(m_Data.shared->m_Ptr)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Transform">*reinterpret_cast&lt;plTransformTemplate&lt;float&gt;*&gt;(m_Data.shared->m_Ptr)</Item>
			<Item Name="Value" Condition="m_uiType == Type::String">*reinterpret_cast&lt;plHybridStringBase&lt;32&gt;*&gt;(m_Data.shared->m_Ptr)</Item>
			<Item Name="Value" Condition="m_uiType == Type::StringView">*reinterpret_cast&lt;plStringView*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::DataBuffer">*reinterpret_cast&lt;plDynamicArray&lt;unsigned char,plDefaultAllocatorWrapper&gt;*&gt;(m_Data.shared->m_Ptr)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Time">*reinterpret_cast&lt;plTime*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Uuid">*reinterpret_cast&lt;plUuid*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::Angle">*reinterpret_cast&lt;plAngle*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::ColorGamma">*reinterpret_cast&lt;plColorGammaUB*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::HashedString">*reinterpret_cast&lt;plHashedString*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::TempHashedString">*reinterpret_cast&lt;plTempHashedString*&gt;(&amp;m_Data)</Item>
			
			<Item Name="Value" Condition="m_uiType == Type::TypedPointer">*reinterpret_cast&lt;plTypedPointer*&gt;(&amp;m_Data)</Item>
			<Item Name="Value" Condition="m_uiType == Type::TypedObject &amp;&amp; m_bIsShared">reinterpret_cast&lt;void*&gt;(m_Data.shared->m_Ptr)</Item>
			<Item Name="Value" Condition="m_uiType == Type::TypedObject &amp;&amp; !m_bIsShared">reinterpret_cast&lt;void*&gt;(&amp;m_Data)</Item>
			<Item Name="ReflectedType" Condition="m_uiType == Type::TypedObject &amp;&amp; !m_bIsShared">m_Data.inlined.m_pType</Item>
			<Item Name="ReflectedType" Condition="m_uiType == Type::TypedObject &amp;&amp; m_bIsShared">m_Data.shared->m_pType</Item>


			<Item Name="Value" Condition="m_uiType == Type::VariantArray">*reinterpret_cast&lt;plDynamicArray&lt;plVariant,plDefaultAllocatorWrapper&gt;*&gt;(m_Data.shared->m_Ptr)</Item>
			<Item Name="Value" Condition="m_uiType == Type::VariantDictionary">*reinterpret_cast&lt;plHashTable&lt;plHybridString&lt;32,plDefaultAllocatorWrapper&gt;,plVariant,plHashHelper&lt;plHybridString&lt;32,plDefaultAllocatorWrapper&gt; &gt;,plDefaultAllocatorWrapper&gt;*&gt;(m_Data.shared->m_Ptr)</Item>

			<Item Name="IsShared">m_bIsShared != 0</Item>
		</Expand>
	</Type>

	<Type Name="plEnum&lt;*&gt;">
		<DisplayString>{($T1::Enum)m_Value}</DisplayString>
	</Type>
	
	<Type Name="plBitflags&lt;*&gt;">
		<DisplayString>{($T1::Enum)m_Value}</DisplayString>
	</Type>
		
	<Type Name="plVec2Template&lt;*&gt;">
		<DisplayString>{{ x={x}, y={y} }}</DisplayString>
	</Type>
	
	<Type Name="plVec3Template&lt;*&gt;">
		<DisplayString>{{ x={x}, y={y}, z={z} }}</DisplayString>
	</Type>

	<Type Name="plVec4Template&lt;*&gt;">
		<DisplayString>{{ x={x}, y={y}, z={z}, w={w} }}</DisplayString>
	</Type>

	<Type Name="plQuatTemplate&lt;*&gt;">
		<DisplayString>{{ x={v.x}, y={v.y}, z={v.z}, w={w} }}</DisplayString>
	</Type>
	
	<Type Name="plPlaneTemplate&lt;*&gt;">
		<DisplayString>{{ nx={m_vNormal.x}, ny={m_vNormal.y}, nz={m_vNormal.z}, negDist={m_fNegDistance} }}</DisplayString>
	</Type>
	
	<Type Name="plColor">
		<DisplayString>{{ r={r}, g={g}, b={b}, a={a} }}</DisplayString>
	</Type>
	
	<Type Name="plTime">
		<DisplayString>{{seconds = {m_fTime} }}</DisplayString>
		<Expand>
			<Item Name="seconds">m_fTime</Item>
			<Item Name="milliseconds">m_fTime * 1000.0</Item>
			<Item Name="microseconds">m_fTime * 1000000.0</Item>
			<Item Name="nanoseconds">m_fTime * 1000000000.0</Item>
		</Expand>
	</Type>

	<Type Name="plMat3Template&lt;*&gt;">
		<Expand>
			<Item Name="Column0">&amp;m_fElementsCM[0],3</Item>
			<Item Name="Column1">&amp;m_fElementsCM[3],3</Item>
			<Item Name="Column2">&amp;m_fElementsCM[6],3</Item>
		</Expand>
	</Type>

	<Type Name="plMat4Template&lt;*&gt;">
		<Expand>
			<Item Name="Column0">&amp;m_fElementsCM[0],4</Item>
			<Item Name="Column1">&amp;m_fElementsCM[4],4</Item>
			<Item Name="Column2">&amp;m_fElementsCM[8],4</Item>
			<Item Name="Column3">&amp;m_fElementsCM[12],4</Item>
		</Expand>
	</Type>

	<Type Name="plResource">
		<DisplayString>{{ID = {m_sUniqueID} }}</DisplayString>
		<Expand>
			<Item Name="ID">m_sUniqueID</Item>
			<Item Name="Desc">m_sResourceDescription</Item>
			<Item Name="State">m_LoadingState</Item>
			<Item Name="RefCount">m_iReferenceCount</Item>
		</Expand>
	</Type>

	<Type Name="plUniquePtr&lt;*&gt;">
		<DisplayString>plUniquePtr {*m_pInstance}</DisplayString>
		<Expand>
			<ExpandedItem>m_pInstance</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="plSharedPtr&lt;*&gt;">
		<DisplayString>plSharedPtr {*m_pInstance}</DisplayString>
		<Expand>
			<ExpandedItem>m_pInstance</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="plScopedRefPointer&lt;*&gt;">
		<DisplayString>plScopedRefPointer {*m_pReferencedObject}</DisplayString>
		<Expand>
			<ExpandedItem>m_pReferencedObject</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="plRefCounted">
		<DisplayString>RefCount = {m_iRefCount}</DisplayString>
	</Type>

	<Type Name="plMutex">
		<DisplayString Condition="m_iLockCount > 0">locked</DisplayString>
		<DisplayString Condition="m_iLockCount == 0">unlocked</DisplayString>
		<Expand>
			<Item Name="[locking_thread_id]" Condition="m_iLockCount > 0">(DWORD)((RTL_CRITICAL_SECTION*)m_hHandle.data)->OwningThread</Item>
			<Item Name="critical_section">*((RTL_CRITICAL_SECTION*)m_hHandle.data)</Item> 
		</Expand>
	</Type>

	<Type Name="plAngle">
		<DisplayString>{{Degree = {m_fRadian*57.295}}}</DisplayString>
		<Expand>
			<Item Name="Radians">m_fRadian</Item>
		</Expand>
	</Type>
</AutoVisualizer>




